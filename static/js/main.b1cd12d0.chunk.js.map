{"version":3,"sources":["Assets/Pixelated Spartron.svg","Assets/Title.svg","Assets/Subtitle 2020.svg","Assets/backgrounds/Header_Section_Background.svg","Assets/register button up.svg","components/Logo.js","components/Content.js","components/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","src","SpartonLogo","Component","Content","id","hackCWRUTitle","subTitle","components_Logo","Countdown","props","_this","Object","classCallCheck","this","HackDate","possibleConstructorReturn","getPrototypeOf","call","state","timeLeft","setCountdown","console","log","_this2","setInterval","setState","distance","Date","getTime","days","Math","floor","hours","minutes","seconds","result","App","style","backgroundImage","concat","headerBackground","components_Countdown","components_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1cd12d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pixelated Spartron.51a1511a.svg\";","module.exports = __webpack_public_path__ + \"static/media/Title.5b4295e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Subtitle 2020.935e5f03.svg\";","module.exports = __webpack_public_path__ + \"static/media/Header_Section_Background.eb5482ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/register button up.48b588ca.svg\";","import React, { Component } from 'react';\r\nimport SpartonLogo from '../Assets/Pixelated Spartron.svg';\r\n\r\nclass Logo extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"myLogo\">\r\n                <div className =\"spartonLogo\">\r\n                    <img src={SpartonLogo} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logo;","import React, { Component } from 'react';\r\nimport hackCWRUTitle from '../Assets/Title.svg';\r\nimport subTitle from '../Assets/Subtitle 2020.svg';\r\nimport buttonUp from '../Assets/register button up.svg';\r\nimport Logo from './Logo.js';\r\n\r\nclass Content extends Component {\r\n    render() {\r\n        return (\r\n          <div className = \"mainContent\" >\r\n            <div className = \"header\">  \r\n                <img id = \"CWRUTitle\" src =  {hackCWRUTitle}/>  \r\n                <img id = \"subTitle\"  src = {subTitle}/>\r\n                <Logo />\r\n                <h3 id = \"CWRU\">Case Western Reserve University</h3>\r\n                <h4 id = \"date\">February 15-17th 2020 </h4>  <br/><br/>\r\n                <h1 id = \"comingSoon\"> Coming Soon...! </h1>\r\n            </div>\r\n          </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react';\r\n\r\nclass Countdown extends Component{\r\n    // Constructor \r\n    constructor (props) {\r\n        super(props);\r\n        const {HackDate} = this.props;\r\n        this.state = {\r\n            timeLeft : this.setCountdown(HackDate)\r\n        };\r\n    }\r\n\r\n\r\n    render(){\r\n        const {timeLeft} = this.state;\r\n        console.log(\"Time Left : \" + timeLeft);\r\n        return (\r\n            <div className = \"countdown\">\r\n                <h3 id = \"countdownText\"> COUNTDOWN TO HACKCWRU 2020: &nbsp;\r\n                                          {timeLeft}</h3>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    componentDidMount(){\r\n        setInterval(() => {\r\n            this.setState({\r\n                timeLeft: this.setCountdown(this.props.HackDate)\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n\r\n\r\n    // function to set the countdown time\r\n    setCountdown(HackDate) {\r\n        // Set the date count down to\r\n        var countDownDate = new Date(HackDate).getTime();\r\n        // Update the countdown every second\r\n            // Get current time\r\n            var currentTime = new Date().getTime();\r\n\r\n            var distance = countDownDate - currentTime;\r\n\r\n            // Time calculations for days, hours, minutes and seconds\r\n            var days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            if(days == 0 && hours == 0 && minutes == 0 && seconds == 0)\r\n                result = \"On Going\";\r\n            else \r\n                var result = days + \" : \" + hours + \" : \" + minutes + \" : \" + seconds;\r\n        \r\n            return result; \r\n    }\r\n\r\n   \r\n    \r\n}\r\n\r\n\r\n\r\nexport default Countdown;","import React, { Component } from 'react';\r\nimport Logo from './components/Logo.js';\r\nimport Content from \"./components/Content.js\";\r\nimport headerBackground from \"./Assets/backgrounds/Header_Section_Background.svg\";\r\nimport './App.css';\r\nimport Countdown from './components/Countdown.js';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"App\" >\r\n        <section className = \"introduction\"  style={{ backgroundImage: `url(${headerBackground})` }}>\r\n          <Countdown HackDate = 'Feb 15, 2020 21:00:00'/>\r\n          <Content />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}